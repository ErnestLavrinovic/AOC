using System;
using System.Collections.Generic;
using System.IO;

class Program
{
    static void Main()
    {
        List<(int x, int y)> coordinates = new List<(int, int)>();
        int j = 0;
        int max = int.MinValue;
        foreach (string line in File.ReadLines("input.txt"))
        {
            char[] characters = line.ToCharArray();
            for (int i = 0; i < characters.Length; i++)
            {
                if (characters[i] == '#')
                    coordinates.Add((i, j));
            }
            j++;
        }
        int baseX = 0, baseY = 0;
        foreach (var (x, y) in coordinates)
        {
            HashSet<double> angles = new HashSet<double>();
            foreach (var (x1, y1) in coordinates)
            {
                if ((x, y) == (x1, y1)) continue;
                double angle = Math.Atan2(x1 - x, y1 - y);
                angles.Add(angle);
            }
            int visible = angles.Count;
            if (visible > max)
            {
                max = visible;
                baseX = x;
                baseY = y;
            }
        }
        Console.WriteLine("X: " + baseX + " Y: " + baseY + " Visible: " + max);
        
        SortedSet<double> BaseAngles = new SortedSet<double>();
        Dictionary<double, List<(int x, int y, int distSq)>> angleMap = new Dictionary<double, List<(int x, int y, int distSq)>>();


        foreach (var (x1, y1) in coordinates)
        {
            if ((baseX, baseY) == (x1, y1)) continue;
            double angle = Math.Atan2(x1 - baseX, baseY - y1);
            if (BaseAngles.Contains(angle) == false)
            {
                BaseAngles.Add(angle);
                int dx = x1 - baseX;
                int dy = y1 - baseY;
                int distanceSquared = dx * dx + dy * dy;

                if (!angleMap.ContainsKey(angle))
                    angleMap[angle] = new List<(int, int, int)>();

                angleMap[angle].Add((x1, y1, distanceSquared));
            }
        }
        foreach (var item in BaseAngles)
        {

            Console.WriteLine(item);
        }
        Console.ReadLine();



    }
}
